require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ImagesController, type: :controller do

  before(:all){			
    @admin = Administrator.create!(account_attributes: {first_name: "Admin", last_name: "istrator", email: "admin@example.com",
			password: "admin", password_confirmation: "admin"}) 

	image = "/tamu.png"
    file = fixture_file_upload(image, "image/png")
	@valid_attributes2 = Hash.new
	@valid_attributes2[:image_url] = file			
  }	
  after(:all){
	@admin.destroy
  } 

  # This should return the minimal set of attributes required to create a valid
  # Image. As you add validations to Image, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
		:image_url => File.new(File.join(Rails.root.join, "app/assets/images/up.gif"))
	}
  }

  let(:invalid_attributes) {
    { }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ImagesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all images as @images" do
	  log_in_as(@admin.account)
      image = Image.create! @valid_attributes2
      get :index, {}, valid_session
      expect(assigns(:images)).to eq([image])
    end
  end

  describe "GET #show" do
    it "assigns the requested image as @image" do
	  log_in_as(@admin.account)
      image = Image.create! @valid_attributes2
      get :show, {:id => image.to_param}, valid_session
      expect(assigns(:image)).to eq(image)
    end
  end

  describe "GET #new" do
    it "assigns a new image as @image" do
	  log_in_as(@admin.account)
      get :new, {}, valid_session
      expect(assigns(:image)).to be_a_new(Image)
    end
  end

  describe "GET #edit" do
    it "assigns the requested image as @image" do
	  log_in_as(@admin.account)
      image = Image.create! @valid_attributes2
      get :edit, {:id => image.to_param}, valid_session
      expect(assigns(:image)).to eq(image)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Image" do
	    log_in_as(@admin.account)
        expect {
          post :create, {:image => @valid_attributes2}, valid_session
        }.to change(Image, :count).by(1)
      end

      it "assigns a newly created image as @image" do
	    log_in_as(@admin.account)
        post :create, {:image => @valid_attributes2}, valid_session
        expect(assigns(:image)).to be_a(Image)
        expect(assigns(:image)).to be_persisted
      end

      it "redirects to the created image" do
	    log_in_as(@admin.account)
        post :create, {:image => @valid_attributes2}, valid_session
        expect(response).to redirect_to(Image.last)
      end
    end

    # context "with invalid params" do
      # it "assigns a newly created but unsaved image as @image" do
	    # log_in_as(@admin.account)
        # post :create, {:image => invalid_attributes}, valid_session
        # expect(assigns(:image)).to be_a_new(Image)
      # end

      # it "re-renders the 'new' template" do
	    # log_in_as(@admin.account)
        # post :create, {:image => invalid_attributes}, valid_session
        # expect(response).to render_template("new")
      # end
    # end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {
		:image_url => File.new(File.join(Rails.root.join, "app/assets/images/up.gif"))
		}
      }

      it "updates the requested image" do
	    log_in_as(@admin.account)
        image = Image.create! @valid_attributes2
        put :update, {:id => image.to_param, :image => @valid_attributes2}, valid_session
        image.reload
        expect(assigns(:image)).to eq(image)
      end

      it "assigns the requested image as @image" do
	    log_in_as(@admin.account)
        image = Image.create! @valid_attributes2
        put :update, {:id => image.to_param, :image => @valid_attributes2}, valid_session
        expect(assigns(:image)).to eq(image)
      end

      it "redirects to the image" do
	    log_in_as(@admin.account)
        image = Image.create! @valid_attributes2
        put :update, {:id => image.to_param, :image => @valid_attributes2}, valid_session
        expect(response).to redirect_to(image)
      end
    end

    # context "with invalid params" do
      # it "assigns the image as @image" do
	    # log_in_as(@admin.account)
        # image = Image.create! @valid_attributes2
        # put :update, {:id => image.to_param, :image => invalid_attributes}, valid_session
        # expect(assigns(:image)).to eq(image)
      # end

      # it "re-renders the 'edit' template" do
	    # log_in_as(@admin.account)
        # image = Image.create! @valid_attributes2
        # put :update, {:id => image.to_param, :image => invalid_attributes}, valid_session
        # expect(response).to render_template("edit")
      # end
    # end
  end

  describe "DELETE #destroy" do
    it "destroys the requested image" do
	  log_in_as(@admin.account)
      image = Image.create! @valid_attributes2
      expect {
        delete :destroy, {:id => image.to_param}, valid_session
      }.to change(Image, :count).by(-1)
    end

    it "redirects to the images list" do
	  log_in_as(@admin.account)
      image = Image.create! @valid_attributes2
      delete :destroy, {:id => image.to_param}, valid_session
      expect(response).to redirect_to(images_url)
    end
  end

end
